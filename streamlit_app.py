import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise de Emo√ß√µes em Alunos",
    page_icon="üìä",
    layout="wide"
)

# Menu lateral
st.sidebar.title("Navega√ß√£o")
pagina = st.sidebar.radio("Escolha uma se√ß√£o:", 
                          ["Introdu√ß√£o", "Base de Dados", "Visualiza√ß√µes", "Futuras Expans√µes"])

# ---------------------------
# P√°gina: Introdu√ß√£o
# ---------------------------
if pagina == "Introdu√ß√£o":
    st.header("Introdu√ß√£o")

    with st.container():
        st.title("An√°lise de Emo√ß√µes em Alunos")

        st.markdown("""
        Esta aplica√ß√£o apresenta um projeto desenvolvido como parte da avalia√ß√£o da disciplina 
        de **Ferramentas e Solu√ß√µes em Nuvem** na P√≥s-gradua√ß√£o em **Minera√ß√£o de Dados Educacionais** 
        do **Instituto Federal do Esp√≠rito Santo - Campus Serra**.

        **Professor:** Maxwell Monteiro  
        **Aluno:** Felippe de Abreu  
        """)

    st.markdown("---")

    with st.expander("üéØ Objetivo do Projeto"):
        st.write("""
        O objetivo √© criar um painel interativo para visualiza√ß√£o e an√°lise das emo√ß√µes dos alunos, 
        buscando identificar padr√µes emocionais que possam estar relacionados ao desempenho acad√™mico 
        e ao risco de evas√£o escolar.
        """)

    with st.expander("üìä Fonte dos Dados"):
        st.write("""
        Para este prot√≥tipo inicial, est√£o sendo utilizados:
        - **Dataset simulado** contendo express√µes faciais (feliz, medo, nervoso, neutro, nojo e triste), 
          junto com indicadores de frequ√™ncia e desempenho escolar;
        - Bases p√∫blicas como **FER2013** (reconhecimento de emo√ß√µes) e **Student Performance Dataset** (UCI), 
          que poder√£o ser integradas em vers√µes futuras.
        """)

# ---------------------------
# P√°gina: Base de Dados
# ---------------------------

elif pagina == "Base de Dados":
    st.header("Base de Dados")

    st.write("""
    Neste projeto, inicialmente ser√£o utilizadas duas abordagens:
    - Um conjunto de dados simulados de express√µes faciais (feliz, medo, nervoso, neutro, nojo e triste);
    - Bases p√∫blicas como **FER2013** (reconhecimento de emo√ß√µes) e **Student Performance Dataset** (UCI).
    """)

    st.write("No futuro, os dados coletados de alunos reais poder√£o ser integrados.")

    try:
        df = pd.read_csv("alunos_emocoes_100.csv")

        st.subheader("Filtro por Emo√ß√£o")
        emocoes_disponiveis = df["expressao"].unique().tolist()
        emocao_selecionada = st.selectbox("Selecione uma emo√ß√£o:", ["Todas"] + emocoes_disponiveis)

        # Aplica o filtro
        if emocao_selecionada == "Todas":
            df_filtrado = df
        else:
            df_filtrado = df[df["expressao"] == emocao_selecionada]

        st.markdown("---")
        st.subheader("Exemplo de Base de Dados")
        st.dataframe(df_filtrado, use_container_width=True)

        st.markdown("---")
        st.subheader("Distribui√ß√£o das Emo√ß√µes")

        # Contagem das emo√ß√µes
        contagem_emocoes = df_filtrado["expressao"].value_counts().reset_index()
        contagem_emocoes.columns = ["Emo√ß√£o", "Frequ√™ncia"]

        # ----------------------------------------------------------
        # NOVO: Escolha do tipo de gr√°fico
        # ----------------------------------------------------------
        tipo_grafico = st.radio(
            "Escolha o tipo de gr√°fico:",
            ["üìä Gr√°fico de Barras", "ü•ß Gr√°fico de Pizza", "üé® Ambos"],
            horizontal=True
        )

        # Exibe gr√°fico de barras
        if tipo_grafico in ["üìä Gr√°fico de Barras", "üé® Ambos"]:
            st.markdown("### üìä Gr√°fico de Barras das Emo√ß√µes")
            st.bar_chart(contagem_emocoes.set_index("Emo√ß√£o"))

        # Exibe gr√°fico de pizza
        if tipo_grafico in ["ü•ß Gr√°fico de Pizza", "üé® Ambos"]:
            st.markdown("### ü•ß Gr√°fico de Pizza das Emo√ß√µes")

            fig, ax = plt.subplots(figsize=(6, 6))
            cores = plt.cm.Set3.colors  # Paleta de cores agrad√°vel
            ax.pie(
                contagem_emocoes["Frequ√™ncia"],
                labels=contagem_emocoes["Emo√ß√£o"],
                autopct="%1.1f%%",
                startangle=90,
                colors=cores,
            )
            ax.axis("equal")  # Deixa o c√≠rculo perfeito
            plt.legend(contagem_emocoes["Emo√ß√£o"], title="Emo√ß√µes", loc="best")
            st.pyplot(fig)
        # ----------------------------------------------------------

        st.markdown("---")
        st.subheader("Estat√≠sticas Descritivas da Base de Dados")
        st.dataframe(df_filtrado.describe(), use_container_width=True)

    except Exception as e:
        st.warning("‚ö†Ô∏è N√£o foi poss√≠vel carregar o dataset. Verifique se o arquivo 'alunos_emocoes_100.csv' est√° na pasta correta.")
        st.text(e)

# ---------------------------
# P√°gina: Visualiza√ß√µes
# ---------------------------
elif pagina == "Visualiza√ß√µes":
    st.header("Visualiza√ß√µes")

    with st.container():
        st.write("Aqui ser√£o apresentados gr√°ficos interativos, por exemplo:")
        st.bar_chart({"Feliz": 12, "Triste": 5, "Medo": 3, "Neutro": 20, "Nojo": 2, "Nervoso": 8})

# ---------------------------
# P√°gina: Futuras Expans√µes
# ---------------------------
elif pagina == "Futuras Expans√µes":
    st.header("Futuras Expans√µes")

    with st.expander("üîÆ Possibilidades Futuras"):
        st.write("""
        - Aplica√ß√£o de modelos de Machine Learning para identificar emo√ß√µes automaticamente;
        - Correla√ß√£o entre emo√ß√µes, desempenho acad√™mico e evas√£o escolar;
        - Dashboard interativo com filtros por turma, disciplina e per√≠odo;
        - Coleta em tempo real usando c√¢mera/webcam integrada.
        """)
